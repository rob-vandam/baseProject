from fastapi import Depends, FastAPI, HTTPException
from typing import Union
from sqlalchemy.orm import Session
from . import models, schemas
from .models import User
from .schemas import User
from .database import SessionLocal, engine

models.Base.metadata.create_all(bind=engine)

app = FastAPI()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@app.get("/", response_model=User)
async def root(authtoken: Union[str, None] = None, action: Union[str, None] = None,admin_id: Union[int, None] = None, chain_id: Union[int, None] = None, app_id: Union[int, None] = None, lang: Union[str, None] = None): #,b1: User, db: Session = Depends(get_db)):
    if authtoken and action == 'install'and admin_id and app_id and lang:
#    def add_user(b1:User,db: Session = Depends(get_db)):
        db = Session# = Depends(get_db)
        db_user = models.User()
        bk=User(authtoken=authtoken, action=action,admin_id=admin_id, chain_id=chain_id,app_id=app_id,lang=lang)
        db.add(bk)
        db.commit()
        db.refresh(bk)
        return User(**b1.dict())
    raise HTTPException(status_code=404, detail="Not found")
"""
@app.get("/", response_model=User)
def add_user(b1: User, db: Session = Depends(get_db)):
    bk=User(id=b1.id, authtoken=b1.authtoken, action=b1.action,admin_id=b1.admin_id, chain_id=b1.chain_id,app_id=b1.app_id,lang=b1.lang)
    db.add(bk)
    db.commit()
    db.refresh(bk)
    return User(**b1.dict())
"""

"""
@app.get("/")
def create_user(user: schemas.User, db: Session = Depends(get_db)):
    db_user = crud.get_user(db, id=user.id)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return crud.create_user(db=db, user=user)

@app.get("/")
async def root(authtoken: Union[str, None] = None, action: Union[str, None] = None,admin_id: Union[int, None] = None, chain_id: Union[int, None] = None, app_id: Union[int, None] = None, lang: Union[str, None] = None,db: Session = Depends(get_db)):
    if authtoken and action == 'install'and admin_id and app_id and lang:
        db_user =crud.create_user(db=db)
        return {'authtoken': authtoken,'action': action,'admin_id': admin_id,'chain_id':chain_id,'app_id': app_id,'lang': lang}

    raise HTTPException(status_code=404, detail="Not found")
    
@app.post("/users/", response_model=schemas.AppUser)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return crud.create_user(db=db, user=user)
"""
